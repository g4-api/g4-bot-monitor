# Workflow to build, test, and release G4 Bot Monitor for production
name: Build, Test & Release G4™ Bot Monitor

# Define permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

# Set environment variables
env:
  ARTIFACT_PUBLISH_DIRECTORY: ${{ github.workspace }}/artifact_publish
  ARTIFACT_STAGING_DIRECTORY: ${{ github.workspace }}/artifact_staging
  ARTIFACT_TYPE: 'Production'
  BINARIES_DIRECTORY: ${{ github.workspace }}/binaries
  BUILD_CONFIGURATION: 'Release'
  BUILD_PLATFORM: 'any cpu'

jobs:
  new-version:
    name: New Version
    runs-on: ubuntu-latest
    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT
  
  publish-platform-specific:
    name: Publish Monitor for Platform ${{ matrix.runtime }}
    runs-on: ubuntu-latest
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' }}
    needs:
      - new-version
    strategy:
      matrix:
        include:
          - runtime: win-x64
            ext: .exe
            platform: windows
          - runtime: linux-x64
            ext: ""
            platform: linux-x64
          - runtime: linux-arm64
            ext: ""
            platform: linux-arm64
          - runtime: osx-arm64
            ext: ""
            platform: macos-arm64

    env:
      BUILD_VERSION: ${{ needs.new-version.outputs.buildVersion }}

    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8

      - name: Publish ${{ matrix.runtime }} Binary
        shell: pwsh
        run: |
            dotnet publish src/G4.Bots.Monitor/G4.Bots.Monitor.csproj `
            -c Release `
            -r ${{ matrix.runtime }} `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:TrimUnusedDependencies=true `
            -p:EnableCompressionInSingleFile=true `
            -p:IncludeAllContentForSelfExtract=true `
            -o ${{ github.workspace }}/artifact_publish/${{ matrix.runtime }}

      - name: Rename Binary
        env:
          FILE_NAME: g4-bot-monitor-${{ matrix.platform }}-${{ env.BUILD_VERSION }}${{ matrix.ext }}
        shell: pwsh
        run: |
          $source = Get-Item "${{ github.workspace }}/artifact_publish/${{ matrix.runtime }}/G4.Bots.Monitor*"
          $target = "${{ github.workspace }}/artifact_publish/${{ matrix.runtime }}/${{ env.FILE_NAME }}"
          Move-Item -Path $source.FullName -Destination $target

      - name: Upload Artifact ${{ matrix.runtime }}/${{ env.FILE_NAME }}
        uses: actions/upload-artifact@v4
        env:
          FILE_NAME: g4-bot-monitor-${{ matrix.platform }}-${{ env.BUILD_VERSION }}${{ matrix.ext }}
        with:
          name: g4-bot-monitor-${{ matrix.platform }}
          path: ${{ github.workspace }}/artifact_publish/${{ matrix.runtime }}/${{ env.FILE_NAME }}

  new-release:
    name: New GitHub Release Version v${{ needs.new-version.outputs.buildVersion }}
    runs-on: ubuntu-latest
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' && needs.publish-platform-specific.result == 'success' }}
    needs:
      - new-version
      - publish-platform-specific

    env:
      BUILD_VERSION: ${{ needs.new-version.outputs.buildVersion }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/artifact_staging/files

    - name: Flatten downloaded artifacts
      shell: pwsh
      run: |
        Get-ChildItem -Path "${{ github.workspace }}/artifact_staging/files" -Recurse -File | Move-Item -Destination "${{ github.workspace }}/artifact_staging" -Force -ErrorAction SilentlyContinue

    - name: Create GitHub Release & Tag v${{ env.BUILD_VERSION }}
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ github.workspace }}/artifact_staging/*
        tag_name: v${{ env.BUILD_VERSION }}
        name: ${{ env.ARTIFACT_TYPE }} v${{ env.BUILD_VERSION }}
        generate_release_notes: true

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
